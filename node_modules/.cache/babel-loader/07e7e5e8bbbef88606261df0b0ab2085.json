{"ast":null,"code":"var _jsxFileName = \"/Users/ek/Library/Mobile Documents/com~apple~CloudDocs/project-Details/src/App.js\";\nimport * as React from 'react';\nimport axios from 'axios';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport ProjectCard from './components/card/ProjectCard';\nimport projectDetailsJSON from './mock/projectDetails.json';\nimport './App.css';\n\nconst App = () => {\n  const [projectDetail, setProjectDetail] = React.useState(projectDetailsJSON.apps);\n  const fetchProjectDetails = React.useCallback(() => {\n    axios.get('getProjectDetails').then(reponse => {\n      if (reponse === undefined) return;else {\n        return reponse.json();\n      }\n    }).then(projectDetailResponse => {\n      if (projectDetailResponse === undefined) return; // setProjectDetail(projectDetailResponse)\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  const postProjectStatus = React.useCallback(parms => {\n    axios.post('getProjectDetails', JSON.stringify(parms)).then(reponse => {\n      if (reponse === undefined) return;else {\n        return reponse.json();\n      }\n    }).then(projectDetail => {\n      if (projectDetail === undefined) return;\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  React.useEffect(() => {\n    fetchProjectDetails();\n  }, [fetchProjectDetails]);\n\n  const handleChange = (e, value) => {\n    console.log('e, value', e, value);\n    const updatedToggleValue = projectDetail.map((item, index) => {\n      if (index === value) {\n        item.properties.toggle = !item.properties.toggle;\n      }\n\n      return item;\n    });\n    setProjectDetail(updatedToggleValue);\n  };\n\n  const handleApplyButtonClick = (event, index) => {\n    postProjectStatus(projectDetail[index]);\n  };\n\n  const inputHandleChange = (event, index) => {\n    const updatedToggleValue = projectDetail.map((item, i) => {\n      if (index === i) {\n        item.properties = { ...item.properties,\n          [event.target.name]: event.target.value\n        };\n      }\n\n      return item;\n    });\n    setProjectDetail(updatedToggleValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, projectDetail && projectDetail.length > 0 ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, projectDetail.map((card, index) => {\n    return /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 3,\n      lg: 3,\n      className: \"cardItem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ProjectCard, Object.assign({}, card, {\n      handleApplyButtonClick: event => handleApplyButtonClick(event, index),\n      handleChange: event => handleChange(event, index),\n      inputHandleChange: event => inputHandleChange(event, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    })));\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"circular-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ek/Library/Mobile Documents/com~apple~CloudDocs/project-Details/src/App.js"],"names":["React","axios","Grid","CircularProgress","ProjectCard","projectDetailsJSON","App","projectDetail","setProjectDetail","useState","apps","fetchProjectDetails","useCallback","get","then","reponse","undefined","json","projectDetailResponse","catch","error","console","log","postProjectStatus","parms","post","JSON","stringify","useEffect","handleChange","e","value","updatedToggleValue","map","item","index","properties","toggle","handleApplyButtonClick","event","inputHandleChange","i","target","name","length","card"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport axios from 'axios';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport ProjectCard from './components/card/ProjectCard';\nimport projectDetailsJSON from './mock/projectDetails.json';\nimport './App.css';\n\nconst App = () => {\n    const [ projectDetail, setProjectDetail ] = React.useState(projectDetailsJSON.apps);\n\n    const fetchProjectDetails = React.useCallback(() => {\n        axios\n            .get('getProjectDetails')\n            .then((reponse) => {\n                if (reponse === undefined) return;\n                else {\n                    return reponse.json();\n                }\n            })\n            .then((projectDetailResponse) => {\n                if (projectDetailResponse === undefined) return;\n                // setProjectDetail(projectDetailResponse)\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }, []);\n\n    const postProjectStatus = React.useCallback((parms) => {\n        axios\n            .post('getProjectDetails', JSON.stringify(parms))\n            .then((reponse) => {\n                if (reponse === undefined) return;\n                else {\n                    return reponse.json();\n                }\n            })\n            .then((projectDetail) => {\n                if (projectDetail === undefined) return;\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }, []);\n\n    React.useEffect(\n        () => {\n            fetchProjectDetails();\n        },\n        [ fetchProjectDetails ]\n    );\n\n    const handleChange = (e, value) => {\n        console.log('e, value', e, value);\n        const updatedToggleValue = projectDetail.map((item, index) => {\n            if (index === value) {\n                item.properties.toggle = !item.properties.toggle;\n            }\n            return item;\n        });\n        setProjectDetail(updatedToggleValue);\n    };\n\n    const handleApplyButtonClick = (event, index) => {\n        postProjectStatus(projectDetail[index]);\n    };\n\n    const inputHandleChange = (event, index) => {\n        const updatedToggleValue = projectDetail.map((item, i) => {\n            if (index === i) {\n                item.properties = {\n                    ...item.properties,\n                    [event.target.name]: event.target.value\n                };\n            }\n            return item;\n        });\n        setProjectDetail(updatedToggleValue);\n    };\n\n    return (\n        <div>\n            {projectDetail && projectDetail.length > 0 ? (\n                <Grid container>\n                    {projectDetail.map((card, index) => {\n                        return (\n                            <Grid item xs={12} sm={12} md={3} lg={3} className='cardItem'>\n                                <ProjectCard\n                                    {...card}\n                                    handleApplyButtonClick={(event) => handleApplyButtonClick(event, index)}\n                                    handleChange={(event) => handleChange(event, index)}\n                                    inputHandleChange={(event) => inputHandleChange(event, index)}\n                                />\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            ) : (\n                <div className='circular-progress'>\n                    <CircularProgress />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}